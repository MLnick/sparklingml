/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.sparklingpandas.sparklingml.feature

import org.apache.spark.ml.param._

import org.apache.lucene.analysis.Analyzer

import com.sparklingpandas.sparklingml.param._

// DO NOT MODIFY THIS FILE! It was auto generated by LuceneAnalyzerGenerators

    
/**
 * A basic Transformer based on org.apache.lucene.analysis.fi.FinnishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class FinnishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.fi.FinnishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.fi.FinnishAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.pt.PortugueseAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class PortugueseAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.pt.PortugueseAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.pt.PortugueseAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.standard.StandardAnalyzer. Supports configuring stopwords.
 */

class StandardAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.standard.StandardAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.standard.StandardAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ar.ArabicAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class ArabicAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.ar.ArabicAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.ar.ArabicAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.el.GreekAnalyzer. Supports configuring stopwords.
 */

class GreekAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.el.GreekAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.el.GreekAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.core.WhitespaceAnalyzer - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class WhitespaceAnalyzerLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.core.WhitespaceAnalyzer()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.id.IndonesianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class IndonesianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.id.IndonesianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.id.IndonesianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.hi.HindiAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class HindiAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.hi.HindiAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.hi.HindiAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.core.UnicodeWhitespaceAnalyzer - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class UnicodeWhitespaceAnalyzerLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.core.UnicodeWhitespaceAnalyzer()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.core.StopAnalyzer. Supports configuring stopwords.
 */

class StopAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.core.StopAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.core.StopAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.en.EnglishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class EnglishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.en.EnglishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.en.EnglishAnalyzer()
    }
  }
}
        
/// There is no default zero arg constructor for org.apache.lucene.analysis.miscellaneous.LimitTokenCountAnalyzer
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.da.DanishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class DanishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.da.DanishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.da.DanishAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ca.CatalanAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class CatalanAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.ca.CatalanAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.ca.CatalanAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.standard.ClassicAnalyzer. Supports configuring stopwords.
 */

class ClassicAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.standard.ClassicAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.standard.ClassicAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.nl.DutchAnalyzer - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class DutchAnalyzerLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.nl.DutchAnalyzer()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.es.SpanishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class SpanishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.es.SpanishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.es.SpanishAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.lt.LithuanianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class LithuanianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.lt.LithuanianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.lt.LithuanianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.fa.PersianAnalyzer. Supports configuring stopwords.
 */

class PersianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.fa.PersianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.fa.PersianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ga.IrishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class IrishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.ga.IrishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.ga.IrishAnalyzer()
    }
  }
}
        
/// There is no default zero arg constructor for org.apache.lucene.analysis.custom.CustomAnalyzer
        
/// There is no default zero arg constructor for org.apache.lucene.search.suggest.document.CompletionAnalyzer
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class ShingleAnalyzerWrapperLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.bg.BulgarianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class BulgarianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.bg.BulgarianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.bg.BulgarianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.br.BrazilianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class BrazilianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.br.BrazilianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.br.BrazilianAnalyzer()
    }
  }
}
        
/// There is no default zero arg constructor for org.apache.lucene.collation.CollationKeyAnalyzer
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.lv.LatvianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class LatvianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.lv.LatvianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.lv.LatvianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.no.NorwegianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class NorwegianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.no.NorwegianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.no.NorwegianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.th.ThaiAnalyzer. Supports configuring stopwords.
 */

class ThaiAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.th.ThaiAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.th.ThaiAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.core.SimpleAnalyzer - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class SimpleAnalyzerLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.core.SimpleAnalyzer()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ru.RussianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class RussianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.ru.RussianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.ru.RussianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.fr.FrenchAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class FrenchAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.fr.FrenchAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.fr.FrenchAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.sv.SwedishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class SwedishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.sv.SwedishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.sv.SwedishAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ckb.SoraniAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class SoraniAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.ckb.SoraniAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.ckb.SoraniAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.tr.TurkishAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class TurkishAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.tr.TurkishAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.tr.TurkishAnalyzer()
    }
  }
}
        
/// There is no default zero arg constructor for org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ro.RomanianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class RomanianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.ro.RomanianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.ro.RomanianAnalyzer()
    }
  }
}
        
/// There is no default zero arg constructor for org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.gl.GalicianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class GalicianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.gl.GalicianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.gl.GalicianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.core.KeywordAnalyzer - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class KeywordAnalyzerLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.core.KeywordAnalyzer()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.it.ItalianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class ItalianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.it.ItalianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.it.ItalianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.eu.BasqueAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class BasqueAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.eu.BasqueAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.eu.BasqueAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.hu.HungarianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class HungarianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.hu.HungarianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.hu.HungarianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.cz.CzechAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class CzechAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.cz.CzechAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.cz.CzechAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.hy.ArmenianAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class ArmenianAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.hy.ArmenianAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.hy.ArmenianAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.ja.JapaneseAnalyzer - does not support
 * any configuration properties.
 * See https://github.com/sparklingpandas/sparklingml/issues/3 & LuceneAnalyzerGenerators
 * for details.
 */

class JapaneseAnalyzerLucene extends LuceneTransformer {
  def buildAnalyzer(): Analyzer = {
    new org.apache.lucene.analysis.ja.JapaneseAnalyzer()
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer. Supports configuring stopwords.
 */

class UAX29URLEmailAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.de.GermanAnalyzer. Supports configuring stopwords.
 * There are additional parameters which can not yet be controlled through this API
 * See https://github.com/sparklingpandas/sparklingml/issues/3
        
 */

class GermanAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.de.GermanAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.de.GermanAnalyzer()
    }
  }
}
        
/**
 * A basic Transformer based on org.apache.lucene.analysis.cjk.CJKAnalyzer. Supports configuring stopwords.
 */

class CJKAnalyzerLucene extends LuceneTransformer with HasStopwords with HasStopwordCase {
  def buildAnalyzer(): Analyzer = {
    // In the future we can use getDefaultStopWords here to allow people to control
    // the snowball stemmer distinctly from the stopwords.
    // but that is a TODO for later.
    if (isSet(stopwords)) {
      new org.apache.lucene.analysis.cjk.CJKAnalyzer(
        LuceneHelpers.wordstoCharArraySet($(stopwords), !$(stopwordCase)))
    } else {
      new org.apache.lucene.analysis.cjk.CJKAnalyzer()
    }
  }
}
        